{"ast":null,"code":"var _jsxFileName = \"/Users/yunjiseob/Desktop/hello-react/src/App.js\";\nimport './App.css'; // import {useState} from 'react'\n\nimport Card from './Card';\nimport Button from './Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst randStart = () => {\n  var cardNum = 16; //이건 나중에 따로 난이도 설정으로 갯수 바꿀수있게 해볼 예정\n\n  let num = [];\n\n  for (let i = 0; i < cardNum; i++) {\n    var ran = Math.floor(Math.random() * cardNum + 1);\n\n    while (1) {\n      if (num.includes(ran)) {\n        ran = Math.floor(Math.random() * cardNum + 1);\n      } else {\n        num[i] = ran;\n        break;\n      }\n    }\n  } //1~16까지의 수를 랜덤하게 배열에 넣는다\n\n};\n\nfunction App() {\n  const flip = e => {\n    e.target.classList.toggle('front');\n    e.target.ClassList.toggle('back');\n  }; // state가 변함에따라 클릭한 한장만 뒤집고 싶었지만 전체에 적용되고, 값변화를 적용하기위해\n  //재 랜더링 하여 모든 카드 값이 랜덤으로 다시 바뀌어서 이 방법은 실패\n\n\n  var cardSet1 = []; //첫번째열을 위한 카드번호 배열\n\n  var cardSet2 = []; //두번째열을 위한 카드번호 배열\n\n  for (let i = 0; i < num.length; i++) {\n    if (i >= num.length) {\n      cardSet2.push( /*#__PURE__*/_jsxDEV(Card, {\n        value: num[i],\n        className: \"front\",\n        onClick: flip\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this)); //num의 8~15번까지의 인덱스 값을 넣음\n    } else {\n      cardSet1.push( /*#__PURE__*/_jsxDEV(Card, {\n        value: num[i],\n        className: \"front\",\n        onClick: flip\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this)); //num의 0~7번까지의 인덱스 값을 넣음\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: cardSet1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: cardSet2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: randStart,\n        children: \"\\uC2DC\\uC791\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Card","Button","randStart","cardNum","num","i","ran","Math","floor","random","includes","App","flip","e","target","classList","toggle","ClassList","cardSet1","cardSet2","length","push"],"sources":["/Users/yunjiseob/Desktop/hello-react/src/App.js"],"sourcesContent":["import './App.css';\n// import {useState} from 'react'\nimport Card from './Card';\nimport Button from './Button';\n\n\n\nconst randStart = () => {\n  var cardNum=16; //이건 나중에 따로 난이도 설정으로 갯수 바꿀수있게 해볼 예정\n  let num=[];\n  for(let i=0; i<cardNum; i++){\n    var ran=Math.floor(Math.random()*cardNum+1);\n    while(1){\n    if(num.includes(ran))\n    {ran=Math.floor(Math.random()*cardNum+1);}\n    else {\n      num[i]=ran;\n      break;\n    }\n    }\n  } //1~16까지의 수를 랜덤하게 배열에 넣는다\n}\n\nfunction App() {\n\n  \n  const flip = (e) => {\n    e.target.classList.toggle('front');\n    e.target.ClassList.toggle('back');\n  } // state가 변함에따라 클릭한 한장만 뒤집고 싶었지만 전체에 적용되고, 값변화를 적용하기위해\n    //재 랜더링 하여 모든 카드 값이 랜덤으로 다시 바뀌어서 이 방법은 실패\n\n  var cardSet1=[];  //첫번째열을 위한 카드번호 배열\n  var cardSet2=[];  //두번째열을 위한 카드번호 배열\n  for(let i=0; i<num.length; i++)\n  {\n    if(i>=num.length){\n      cardSet2.push(<Card value={num[i]} className='front' onClick={flip}/>); //num의 8~15번까지의 인덱스 값을 넣음\n    }\n    else {\n      cardSet1.push(<Card value={num[i]} className='front' onClick={flip}/>); //num의 0~7번까지의 인덱스 값을 넣음\n    }\n  }\n  \n  return (\n   <>\n  <div>\n    {cardSet1}\n  </div>\n  <div>\n    {cardSet2}\n  </div>\n   <div>\n  <Button onClick={randStart}>시작하기</Button>\n  </div> \n   </>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAO,WAAP,C,CACA;;AACA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;;AAIA,MAAMC,SAAS,GAAG,MAAM;EACtB,IAAIC,OAAO,GAAC,EAAZ,CADsB,CACN;;EAChB,IAAIC,GAAG,GAAC,EAAR;;EACA,KAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,OAAf,EAAwBE,CAAC,EAAzB,EAA4B;IAC1B,IAAIC,GAAG,GAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcN,OAAd,GAAsB,CAAjC,CAAR;;IACA,OAAM,CAAN,EAAQ;MACR,IAAGC,GAAG,CAACM,QAAJ,CAAaJ,GAAb,CAAH,EACA;QAACA,GAAG,GAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcN,OAAd,GAAsB,CAAjC,CAAJ;MAAyC,CAD1C,MAEK;QACHC,GAAG,CAACC,CAAD,CAAH,GAAOC,GAAP;QACA;MACD;IACA;EACF,CAbqB,CAapB;;AACH,CAdD;;AAgBA,SAASK,GAAT,GAAe;EAGb,MAAMC,IAAI,GAAIC,CAAD,IAAO;IAClBA,CAAC,CAACC,MAAF,CAASC,SAAT,CAAmBC,MAAnB,CAA0B,OAA1B;IACAH,CAAC,CAACC,MAAF,CAASG,SAAT,CAAmBD,MAAnB,CAA0B,MAA1B;EACD,CAHD,CAHa,CAMX;EACA;;;EAEF,IAAIE,QAAQ,GAAC,EAAb,CATa,CASK;;EAClB,IAAIC,QAAQ,GAAC,EAAb,CAVa,CAUK;;EAClB,KAAI,IAAId,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACD,GAAG,CAACgB,MAAnB,EAA2Bf,CAAC,EAA5B,EACA;IACE,IAAGA,CAAC,IAAED,GAAG,CAACgB,MAAV,EAAiB;MACfD,QAAQ,CAACE,IAAT,eAAc,QAAC,IAAD;QAAM,KAAK,EAAEjB,GAAG,CAACC,CAAD,CAAhB;QAAqB,SAAS,EAAC,OAA/B;QAAuC,OAAO,EAAEO;MAAhD;QAAA;QAAA;QAAA;MAAA,QAAd,EADe,CACyD;IACzE,CAFD,MAGK;MACHM,QAAQ,CAACG,IAAT,eAAc,QAAC,IAAD;QAAM,KAAK,EAAEjB,GAAG,CAACC,CAAD,CAAhB;QAAqB,SAAS,EAAC,OAA/B;QAAuC,OAAO,EAAEO;MAAhD;QAAA;QAAA;QAAA;MAAA,QAAd,EADG,CACqE;IACzE;EACF;;EAED,oBACC;IAAA,wBACD;MAAA,UACGM;IADH;MAAA;MAAA;MAAA;IAAA,QADC,eAID;MAAA,UACGC;IADH;MAAA;MAAA;MAAA;IAAA,QAJC,eAOA;MAAA,uBACD,QAAC,MAAD;QAAQ,OAAO,EAAEjB,SAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADC;MAAA;MAAA;MAAA;IAAA,QAPA;EAAA,gBADD;AAaD;;KAlCQS,G;AAoCT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}