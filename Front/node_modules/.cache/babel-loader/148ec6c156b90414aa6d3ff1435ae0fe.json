{"ast":null,"code":"import _slicedToArray from\"/Users/yunjiseob/Desktop/hello-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import'./App.css';import{useState}from'react';import Card from'./Card';import Button from'./Button';import pizza from'./assets/피자.png';import banana from'./assets/바나나.png';import cookie from'./assets/쿠키.png';import watermel from'./assets/수박.png';import chicken from'./assets/치킨.png';import cheeze from'./assets/치즈.png';import choco from'./assets/초콜릿.png';import shirimp from'./assets/새우.png';import back from'./assets/뒷면.png';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function App(){var cardNum=16;//이건 나중에 따로 난이도 설정으로 갯수 바꿀수있게 해볼 예정\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),num=_useState2[0],setNum=_useState2[1];var imageSave={0:back,//뒷면을 위한 0값\n1:pizza,2:banana,3:cookie,4:watermel,5:chicken,6:cheeze,7:choco,8:shirimp,9:pizza,10:banana,11:cookie,12:watermel,13:chicken,14:cheeze,15:choco,16:shirimp};//이미지 객체를 사용하는게 편한거같다.. 이러면 컴포넌트로 사용하는 의미가있을까..\nvar randStart=function randStart(){var front=document.querySelectorAll('.front');var complete=document.querySelectorAll('.complete');front.forEach(function(fronts){fronts.classList.remove('front');fronts.classList.add('back');});complete.forEach(function(completes){completes.classList.remove('complete');completes.classList.add('back');});//초기화를 위한 앞면인 카드들을 모두 뒷면으로\nvar num1=[];for(var i=0;i<cardNum;i++){var ran=Math.floor(Math.random()*cardNum+1);while(1){if(num1.includes(ran)){ran=Math.floor(Math.random()*cardNum+1);}else{num1[i]=ran;break;}setNum(num1);}}//랜덤숫자를 주어지는걸 버튼을 눌렀을때만 생성\nvar cards=document.querySelectorAll('.back');cards.forEach(function(card,index){setTimeout(function(){card.src=back;},2000+100*index);});//카드가 배치되고 일정시간이지나면 뒤집힌다\n};var cardSelect1=0;var cardSelect2=0;var flip=function flip(e){var taget=e.target;if(taget.classList.contains('complete')){taget.preventDefault();}if(taget.alt>0){taget.classList.toggle('front');//front Class를 토글\ntaget.classList.toggle('back');}if(taget.classList.contains('front')){taget.src=imageSave[taget.alt];//front Class가 토글되고 front Class가 있다면 뒷면이었다가 앞면이 된다\nif(cardSelect1===0)//뒤집은 카드 두장을 비교하기 위해 선택한 카드의 alt값을 변수에 저장한다\n{cardSelect1=taget.alt;}else{cardSelect2=taget.alt;}if(cardSelect1>0&&cardSelect2>0&&Math.abs(cardSelect2-cardSelect1)===8){//뽑은 두카드의 alt값이 8차이라면 같은 카드다\n//같은카드를 뽑았다면 앞면 표시상태로 클릭해도 이벤트가 진행되지 않게 해야한다\ncardSelect1=0;cardSelect2=0;var front=document.querySelectorAll('.front');front.forEach(function(com){com.classList.add('complete');com.classList.remove('front');});var complete=document.querySelectorAll('.complete');if(complete.length===16){setTimeout(function(){alert('게임 끝!');},200);}}else if(cardSelect1>0&&cardSelect2>0&&Math.abs(cardSelect2-cardSelect1)!==8){setTimeout(function(){console.log(cardSelect1+' 1번');console.log(cardSelect2+' 2번');var front=document.querySelectorAll('.front');front.forEach(function(fronts){fronts.src=back;fronts.classList.remove('front');fronts.classList.add('back');});cardSelect1=0;cardSelect2=0;},300);}}else{taget.src=back;// 해당이미지를 뒷면으로 만든다\ncardSelect1=0;}};var cardSet1=[];//첫번째열을 위한 카드번호 배열\nvar cardSet2=[];//두번째열을 위한 카드번호 배열\nfor(var i=0;i<cardNum;i++){if(i>=cardNum/2){cardSet2.push(/*#__PURE__*/_jsx(Card,{alt:num[i],className:\"back\",onClick:flip}));//num의 8~15번까지의 인덱스 값을 넣음\n}else{cardSet1.push(/*#__PURE__*/_jsx(Card,{alt:num[i],className:\"back\",onClick:flip}));//num의 0~7번까지의 인덱스 값을 넣음\n}}return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"top\",children:/*#__PURE__*/_jsx(\"div\",{id:\"title\",children:\"\\uCE74\\uB4DC \\uB4A4\\uC9D1\\uAE30 \\uAC8C\\uC784\"})}),/*#__PURE__*/_jsxs(\"div\",{id:\"content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"cardset\",children:cardSet1}),/*#__PURE__*/_jsx(\"div\",{className:\"cardset\",children:cardSet2}),/*#__PURE__*/_jsx(\"div\",{className:\"button\",children:/*#__PURE__*/_jsx(Button,{onClick:randStart,children:\"\\uC2DC\\uC791\\uD558\\uAE30\"})})]})]});}export default App;","map":{"version":3,"names":["useState","Card","Button","pizza","banana","cookie","watermel","chicken","cheeze","choco","shirimp","back","App","cardNum","num","setNum","imageSave","randStart","front","document","querySelectorAll","complete","forEach","fronts","classList","remove","add","completes","num1","i","ran","Math","floor","random","includes","cards","card","index","setTimeout","src","cardSelect1","cardSelect2","flip","e","taget","target","contains","preventDefault","alt","toggle","abs","com","length","alert","console","log","cardSet1","cardSet2","push"],"sources":["/Users/yunjiseob/Desktop/hello-react/src/App.js"],"sourcesContent":["import './App.css';\nimport {useState} from 'react'\nimport Card from './Card';\nimport Button from './Button';\nimport pizza from './assets/피자.png';\nimport banana from './assets/바나나.png';\nimport cookie from './assets/쿠키.png';\nimport watermel from './assets/수박.png';\nimport chicken from './assets/치킨.png';\nimport cheeze from './assets/치즈.png';\nimport choco from './assets/초콜릿.png';\nimport shirimp from './assets/새우.png';\nimport back from './assets/뒷면.png';\n\n\n\nfunction App() {\n  var cardNum=16; //이건 나중에 따로 난이도 설정으로 갯수 바꿀수있게 해볼 예정\n  const [num,setNum]=useState([]);\n\n  var imageSave={\n    0:back, //뒷면을 위한 0값\n    1:pizza,\n    2:banana,\n    3:cookie,\n    4:watermel,\n    5:chicken,\n    6:cheeze,\n    7:choco,\n    8:shirimp,\n    9:pizza,\n    10:banana,\n    11:cookie,\n    12:watermel,\n    13:chicken,\n    14:cheeze,\n    15:choco,\n    16:shirimp,\n  }; //이미지 객체를 사용하는게 편한거같다.. 이러면 컴포넌트로 사용하는 의미가있을까..\n  \n  const randStart = () => {\n    const front=document.querySelectorAll('.front');\n    const complete=document.querySelectorAll('.complete');\n    front.forEach(fronts => {\n      fronts.classList.remove('front');\n      fronts.classList.add('back');\n    });\n    complete.forEach(completes => {\n      completes.classList.remove('complete');\n      completes.classList.add('back');\n    }); //초기화를 위한 앞면인 카드들을 모두 뒷면으로\n    \n    var num1=[];\n    for(let i=0; i<cardNum; i++){\n      var ran=Math.floor(Math.random()*cardNum+1);\n      while(1){\n      if(num1.includes(ran))\n      {ran=Math.floor(Math.random()*cardNum+1);}\n      else {\n        num1[i]=ran;\n        break;\n      }\n      setNum(num1);\n      }\n    } //랜덤숫자를 주어지는걸 버튼을 눌렀을때만 생성\n\n    const cards=document.querySelectorAll('.back');\n    cards.forEach((card,index) => {\n      setTimeout(()=>{\n        card.src=back;\n      },2000+100*index);\n    }); //카드가 배치되고 일정시간이지나면 뒤집힌다\n  }\n  \n  var cardSelect1=0;\n  var cardSelect2=0;\n  const flip = (e) => {\n    var taget=e.target\n    if(taget.classList.contains('complete'))\n    {taget.preventDefault();}\n    if(taget.alt>0){\n    taget.classList.toggle('front'); //front Class를 토글\n    taget.classList.toggle('back');\n    }\n    if(taget.classList.contains('front'))\n    {\n      taget.src=imageSave[taget.alt]; //front Class가 토글되고 front Class가 있다면 뒷면이었다가 앞면이 된다\n      if(cardSelect1===0) //뒤집은 카드 두장을 비교하기 위해 선택한 카드의 alt값을 변수에 저장한다\n      {\n        cardSelect1=taget.alt;\n      }\n      else {cardSelect2=taget.alt; \n      }\n\n      if(cardSelect1>0&&cardSelect2>0&&Math.abs(cardSelect2-cardSelect1)===8){ //뽑은 두카드의 alt값이 8차이라면 같은 카드다\n        //같은카드를 뽑았다면 앞면 표시상태로 클릭해도 이벤트가 진행되지 않게 해야한다\n        cardSelect1=0;  \n        cardSelect2=0;\n        const front=document.querySelectorAll('.front');\n        front.forEach(com => {\n          com.classList.add('complete');\n          com.classList.remove('front');\n        });\n        const complete = document.querySelectorAll('.complete');\n        if(complete.length===16)\n        {\n          setTimeout(function(){\n            alert('게임 끝!');\n          },200);\n        }\n      }\n      else if(cardSelect1>0&&cardSelect2>0&&Math.abs(cardSelect2-cardSelect1)!==8){\n        setTimeout(function(){\n          console.log(cardSelect1+' 1번');\n          console.log(cardSelect2+' 2번');\n          const front=document.querySelectorAll('.front');\n          front.forEach(fronts =>{\n          fronts.src=back;\n          fronts.classList.remove('front');\n          fronts.classList.add('back');\n        });\n        cardSelect1=0;\n        cardSelect2=0;\n        },300);\n      }\n    }\n    else {\n      taget.src=back; // 해당이미지를 뒷면으로 만든다\n      cardSelect1=0;\n    }\n  } \n\n  var cardSet1=[];  //첫번째열을 위한 카드번호 배열\n  var cardSet2=[];  //두번째열을 위한 카드번호 배열\n  for(let i=0; i<cardNum; i++)\n  {\n    if(i>=cardNum/2){\n      cardSet2.push(<Card alt={num[i]} className='back' onClick={flip}/>); //num의 8~15번까지의 인덱스 값을 넣음\n    }\n    else {\n      cardSet1.push(<Card alt={num[i]} className='back' onClick={flip}/>); //num의 0~7번까지의 인덱스 값을 넣음\n    }\n  }\n  \n  return (\n   <>\n   <div className='top'>\n    <div id='title'>카드 뒤집기 게임</div>\n   </div>\n   <div id='content'>\n  <div className='cardset'>\n    {cardSet1}\n  </div>\n  <div className='cardset'>\n    {cardSet2}\n  </div>\n  <div className='button'>\n    <Button onClick={randStart}>시작하기</Button>\n  </div>\n  </div>\n   </>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}