{"ast":null,"code":"var _jsxFileName = \"/Users/yunjiseob/Desktop/hello-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useState } from 'react';\nimport Card from './Card';\nimport Button from './Button';\nimport pizza from './assets/피자.png';\nimport banana from './assets/바나나.png';\nimport cookie from './assets/쿠키.png';\nimport watermel from './assets/수박.png';\nimport chicken from './assets/치킨.png';\nimport cheeze from './assets/치즈.png';\nimport choco from './assets/초콜릿.png';\nimport shirimp from './assets/새우.png';\nimport back from './assets/뒷면.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  var cardNum = 16; //이건 나중에 따로 난이도 설정으로 갯수 바꿀수있게 해볼 예정\n\n  const [num, setNum] = useState([]);\n  var imageSave = {\n    0: back,\n    //뒷면을 위한 0값\n    1: pizza,\n    2: banana,\n    3: cookie,\n    4: watermel,\n    5: chicken,\n    6: cheeze,\n    7: choco,\n    8: shirimp,\n    9: pizza,\n    10: banana,\n    11: cookie,\n    12: watermel,\n    13: chicken,\n    14: cheeze,\n    15: choco,\n    16: shirimp\n  };\n\n  const randStart = () => {\n    var num1 = [];\n\n    for (let i = 0; i < cardNum; i++) {\n      var ran = Math.floor(Math.random() * cardNum + 1);\n\n      while (1) {\n        if (num1.includes(ran)) {\n          ran = Math.floor(Math.random() * cardNum + 1);\n        } else {\n          num1[i] = ran;\n          break;\n        }\n\n        setNum(num1);\n      }\n    } //랜덤숫자를 주어지는걸 버튼을 눌렀을때만 생성\n\n\n    const cards = document.querySelectorAll('.front');\n    cards.forEach((card, index) => {\n      setTimeout(() => {\n        card.classList.toggle('front');\n        card.src = back;\n      }, 2000 + 100 * index);\n    }); //카드가 배치되고 일정시간이지나면 뒤집힌다\n  };\n\n  const flip = e => {\n    console.log(imageSave);\n    var taget = e.target;\n    e.target.classList.toggle('front'); //front Class를 토글\n\n    if (taget.classList.contains('front')) {\n      taget.src = imageSave[taget.alt]; //front Class가 토글되고 front Class가 있다면 뒷면이었다가 앞면이 된다\n    } else {\n      imageSave[taget.alt] = taget.src; //토글되고 front가 사라지면 앞면에서 뒷면이 되야하기때문에 객체에 해당이미지를 저장하고\n\n      taget.src = back; // 해당이미지를 뒷면으로 만든다\n    }\n  };\n\n  var cardSet1 = []; //첫번째열을 위한 카드번호 배열\n\n  var cardSet2 = []; //두번째열을 위한 카드번호 배열\n\n  for (let i = 0; i < cardNum; i++) {\n    if (i >= cardNum / 2) {\n      cardSet2.push( /*#__PURE__*/_jsxDEV(Card, {\n        alt: num[i],\n        className: \"front\",\n        onClick: flip\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this)); //num의 8~15번까지의 인덱스 값을 넣음\n    } else {\n      cardSet1.push( /*#__PURE__*/_jsxDEV(Card, {\n        alt: num[i],\n        className: \"front\",\n        onClick: flip\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this)); //num의 0~7번까지의 인덱스 값을 넣음\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: cardSet1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: cardSet2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: randStart,\n        children: \"\\uC2DC\\uC791\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"8RhF5d1bOCUFkcyQxrAOo89YIPI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Card","Button","pizza","banana","cookie","watermel","chicken","cheeze","choco","shirimp","back","App","cardNum","num","setNum","imageSave","randStart","num1","i","ran","Math","floor","random","includes","cards","document","querySelectorAll","forEach","card","index","setTimeout","classList","toggle","src","flip","e","console","log","taget","target","contains","alt","cardSet1","cardSet2","push"],"sources":["/Users/yunjiseob/Desktop/hello-react/src/App.js"],"sourcesContent":["import './App.css';\nimport {useState} from 'react'\nimport Card from './Card';\nimport Button from './Button';\nimport pizza from './assets/피자.png';\nimport banana from './assets/바나나.png';\nimport cookie from './assets/쿠키.png';\nimport watermel from './assets/수박.png';\nimport chicken from './assets/치킨.png';\nimport cheeze from './assets/치즈.png';\nimport choco from './assets/초콜릿.png';\nimport shirimp from './assets/새우.png';\nimport back from './assets/뒷면.png';\n\n\n\nfunction App() {\n  var cardNum=16; //이건 나중에 따로 난이도 설정으로 갯수 바꿀수있게 해볼 예정\n  const [num,setNum]=useState([]);\n\n  var imageSave={\n    0:back, //뒷면을 위한 0값\n    1:pizza,\n    2:banana,\n    3:cookie,\n    4:watermel,\n    5:chicken,\n    6:cheeze,\n    7:choco,\n    8:shirimp,\n    9:pizza,\n    10:banana,\n    11:cookie,\n    12:watermel,\n    13:chicken,\n    14:cheeze,\n    15:choco,\n    16:shirimp,\n  };\n  \n  const randStart = () => {\n    var num1=[];\n    for(let i=0; i<cardNum; i++){\n      var ran=Math.floor(Math.random()*cardNum+1);\n      while(1){\n      if(num1.includes(ran))\n      {ran=Math.floor(Math.random()*cardNum+1);}\n      else {\n        num1[i]=ran;\n        break;\n      }\n      setNum(num1);\n      }\n    } //랜덤숫자를 주어지는걸 버튼을 눌렀을때만 생성\n\n    const cards=document.querySelectorAll('.front');\n    cards.forEach((card,index) => {\n      setTimeout(()=>{\n        card.classList.toggle('front');\n        card.src=back;\n      },2000+100*index);\n    }); //카드가 배치되고 일정시간이지나면 뒤집힌다\n  }\n  \n  \n  const flip = (e) => {\n    console.log(imageSave);\n    var taget=e.target\n    e.target.classList.toggle('front'); //front Class를 토글\n    if(taget.classList.contains('front'))\n    {\n      taget.src=imageSave[taget.alt]; //front Class가 토글되고 front Class가 있다면 뒷면이었다가 앞면이 된다\n    }\n    else {\n      imageSave[taget.alt]=taget.src; //토글되고 front가 사라지면 앞면에서 뒷면이 되야하기때문에 객체에 해당이미지를 저장하고\n      taget.src=back; // 해당이미지를 뒷면으로 만든다\n    }\n  } \n\n  var cardSet1=[];  //첫번째열을 위한 카드번호 배열\n  var cardSet2=[];  //두번째열을 위한 카드번호 배열\n  for(let i=0; i<cardNum; i++)\n  {\n    if(i>=cardNum/2){\n      cardSet2.push(<Card alt={num[i]} className='front' onClick={flip}/>); //num의 8~15번까지의 인덱스 값을 넣음\n    }\n    else {\n      cardSet1.push(<Card alt={num[i]} className='front' onClick={flip}/>); //num의 0~7번까지의 인덱스 값을 넣음\n    }\n  }\n  \n  return (\n   <>\n  <div>\n    {cardSet1}\n  </div>\n  <div>\n    {cardSet2}\n  </div>\n   <div>\n  <Button onClick={randStart}>시작하기</Button>\n  </div> \n   </>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}